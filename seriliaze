import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.ObjectMapper;
import org.springframework.stereotype.Service;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@Service
public class UserService {
    private final UserRepository userRepository;
    private final ReactiveStringRedisTemplate redisTemplate;
    private final ObjectMapper objectMapper;

    public UserService(UserRepository userRepository,
                       ReactiveStringRedisTemplate redisTemplate,
                       ObjectMapper objectMapper) {
        this.userRepository = userRepository;
        this.redisTemplate = redisTemplate;
        this.objectMapper = objectMapper; // Spring Boot auto-configures this
    }

    private String key(String id) {
        return "user:" + id;
    }

    // Helper: serialize
    private String toJson(User user) {
        try {
            return objectMapper.writeValueAsString(user);
        } catch (JsonProcessingException e) {
            throw new RuntimeException("JSON serialization error", e);
        }
    }

    // Helper: deserialize
    private User fromJson(String json) {
        try {
            return objectMapper.readValue(json, User.class);
        } catch (JsonProcessingException e) {
            throw new RuntimeException("JSON deserialization error", e);
        }
    }

    // CREATE
    public Mono<User> createUser(User user) {
        return userRepository.save(user)
            .flatMap(saved ->
                redisTemplate.opsForValue().set(key(saved.getId()), toJson(saved))
                    .thenReturn(saved)
            );
    }

    // READ
    public Mono<User> getUserById(String id) {
        return redisTemplate.opsForValue().get(key(id))
            .map(this::fromJson) // convert JSON to User
            .switchIfEmpty(
                userRepository.findById(id)
                    .flatMap(user ->
                        redisTemplate.opsForValue().set(key(id), toJson(user))
                            .thenReturn(user)
                    )
            );
    }

    // READ ALL
    public Flux<User> getAllUsers() {
        return userRepository.findAll();
    }

    // UPDATE
    public Mono<User> updateUser(String id, User updated) {
        return userRepository.findById(id)
            .flatMap(existing -> {
                existing.setName(updated.getName());
                existing.setEmail(updated.getEmail());
                return userRepository.save(existing);
            })
            .flatMap(saved ->
                redisTemplate.opsForValue().set(key(saved.getId()), toJson(saved))
                    .thenReturn(saved)
            );
    }

    // DELETE
    public Mono<Void> deleteUser(String id) {
        return userRepository.deleteById(id)
            .then(redisTemplate.delete(key(id)).then());
    }
}
